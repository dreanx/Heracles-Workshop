// First Labour : Heracles vs Nemean Lion
// use your Figher class here
const MAX_LIFE = 100;

class Fighter {
  constructor(namee, strength, dexterity, life) {
    this.namee = namee;
    this.strength = strength;
    this.dexterity = dexterity;
    this.life = MAX_LIFE;
  }

  fight(attacked) {
    let damageDone =
      Math.max(1, Math.floor(Math.random() * this.strength * 2)) - attacked.dexterity;
    if (damageDone <= 0) {
      console.log(`${this.namee} miss! üõ°Ô∏è`);
    }
    else if (Math.floor(Math.random()*6 > 5 )) { console.log(
        `‚ùï‚ùï‚ùïCRITICAL‚ùï‚ùï‚ùï ${this.namee} ‚öîÔ∏è ${attacked.namee} for ${4*damageDone} HP`
      );
      return (attacked.life = attacked.life - 4*damageDone);}
    else {
      console.log(
        `${this.namee} ‚öîÔ∏è ${attacked.namee} for ${damageDone} HP`
      );
      return (attacked.life = attacked.life - damageDone);
    }
  }

}

const Heracles = new Fighter("üë®Heracles", 20, 6);
const NemeanLion = new Fighter("üò∫Nemean Lion", 11, 13);
const Dragon = new Fighter("üêâDragon", 30, 1);
const ratKing = new Fighter("üêÄRat King", 5, 30);

function deathMatch(fighter1, fighter2) {
    let count = 1;
    while(fighter1.life > 0 && fighter2.life > 0) {
    console.log(`üé≤ ROUND ${count}`);
    fighter1.fight(fighter2);
    console.log(`${fighter2.namee} ‚ù§Ô∏è: ${fighter2.life}`);
    if(fighter2.life <= 0){
        console.log(`${fighter2.namee} : üíÄ, ‚úåÔ∏è${fighter1.namee} wins!‚úåÔ∏è`)
        break;};
    fighter2.fight(fighter1);
    console.log(`${fighter1.namee} ‚ù§Ô∏è: ${fighter1.life}`);
    if(fighter1.life <= 0){
        console.log(`${fighter1.namee} : üíÄ, ‚úåÔ∏è${fighter2.namee} wins!‚úåÔ∏è`)
        break;};
    count++;
}}

deathMatch(Dragon, NemeanLion);
